/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  4.x                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


application     simpleFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         1500;	//500-1000

deltaT          1;

writeControl    timeStep;

writeInterval   100;	//50-100

purgeWrite      10;

writeFormat     binary;	//ascii-binary

writePrecision  8;

writeCompression off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

functions
{
minmaxdomain_scalar
{
    type            volFieldValue;
    libs            ("libfieldFunctionObjects.so");

    enabled         true;   //true or false
    log             true;   //write to screen
    
    //writeControl    writeTime;
    writeControl    timeStep;
    writeInterval   1;

    writeFields     false;  //write solution to field value - Not needed when only reporting value to screen

    writeLocation   true;   //write location in the output file

    //mode component;

    regionType      all;

    operation       none;

    fields
    (
        p k epsilon nut
    );
}

minmaxdomain_vector
{
    type            volFieldValue;
    libs            ("libfieldFunctionObjects.so");

    enabled         true;   //true or false
    log             true;   //write to screen
    
    //writeControl    writeTime;
    writeControl    timeStep;
    writeInterval   1;

    writeFields     false;  //write solution to field value - Not needed when only reporting value to screen

    writeLocation   true;   //write location in the output file

    //mode component;

    regionType      all;

    operation       none;

    fields
    (
        U
    );
}

mindomain_scalar
{
    $minmaxdomain_scalar
    operation       min;
}

maxdomain_scalar
{
    $minmaxdomain_scalar
    operation       max;
}

forcesbody
{
    type forces;
    functionObjectLibs ("libforces.so");

    //outputControl outputTime;
    writeControl   timeStep;
    writeInterval  1;

    //// Patches to sample
    patches ("cessna");

    //// Name of fields
    pName p;
    Uname U;

    //// Density
    rho rhoInf;
    rhoInf 1.225;

    //// Centre of rotation
    CofR (-11.8 0 0);
}

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

    yplus
    {
    	type yPlus;
    	functionObjectLibs ("libutilityFunctionObjects.so");
    	enabled true;
        writeControl outputTime;
    }

///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////

wallShearStress1
{
    type                wallShearStress;
    functionObjectLibs  ("libutilityFunctionObjects.so");

    enabled true;

    writeControl outputTime;
    //writeControl timeStep;
    //writeInterval 1;

    //log true;
}

    fieldAverage
    {
        type            fieldAverage;
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled         true;
        writeControl   outputTime;

	//writeControl   timeStep;
	//writeInterval  100;

	//cleanRestart true;

	//timeStart       50;
	//timeEnd         2000;

        fields
        (
            U
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            p
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            nut
            {
                mean        on;
                prime2Mean  on;
                base        time;
            }

            k
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }

            epsilon
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }

            Q
            {
                mean        on;
                prime2Mean  off;
                base        time;
            }

        );
    }

};
// ************************************************************************* //
